void merge_sort(int[] A, int n) {
	merge_sort_c(A, 0, n - 1);
}

void merge_sort_c(int[] A, int start_index, int end_index) {
	if (start_index >= end_index) return;
	int mid = (start_index + end_index) / 2;
	merge_sort_c(A, start_index, mid);
	merge_sort_c(A, mid + 1, end_index);
	merge(A, start_index, mid, end_index);
}

void merge(int[] A, int start_index, int middle, int end_index) {
	int i = start_index; int j = middle + 1; int k = 0;
	int[] temp = new int[end_index - start_index + 1]
	while (i <= middle && j <= end_index) {
        if (A[i] <= A[j]) {
            temp[k++] = A[i++];
        } else {
            temp[k++] = A[j++];
        }
	}

	int start = i; int end = middle;
	if (i > middle) {
	    start = j; end = end_index;
	}
	while (start <= end) {
	    temp[start++] = temp[k++];
	}

	for (int i = 0; i <= (end_index - start_index); i++) {
	    A[start_index+i] = temp[i];
	}
	
}

