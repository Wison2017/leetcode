编辑距离指的就是，将一个字符串转化成另一个字符串，需要的最少编辑操作次数（比如增加一个字符、删除一个字符、替换一个字符）。
  莱文斯坦距离（Levenshtein distance）: 文斯坦距离允许增加、删除、替换字符这三个编辑操作;
  最长公共子串长度（Longest common substring length）: 莱最长公共子串长度只允许增加、删除字符这两个编辑操作.

如何编程计算莱文斯坦距离？
回溯法:
private char[] a = "mitcmu".toCharArray();
private char[] b = "mtacnu".toCharArray();
private int n = 6;
private int m = 6;
private int minDist = Integer.MAX_VALUE; // 存储结果
// 调用方式 lwstBT(0, 0, 0);
public lwstBT(int i, int j, int edist) {
	if (i == n || j == m) {
	    if (i < n) {
	        edist += n - i;
	    }
	    if (j < m) {
	        edist += n - j;
	    }
	    if (edist < minDist) {
	        minDist = edist;
	    }
	    return;
	}
	if (a[i] == b[j]) {
        lwstBT(i + 1, j + 1, edist);
	} else {
        lwstBT(i + 1, j, edist + 1);
        lwstBT(i, j + 1, edist + 1);
        lwstBT(i + 1, j + 1, edist + 1);
	}
}

动态规划:
public int lwstBT(char[] a, int n, char[] b, int m) {
	int[][] minDist = new int[n][m];
	for (int j = 0; j < m; j++) {
	    if (a[0] == b[j]) minDist[0][j] = j;
	    else if (j > 0) minDist[0][j] = minDist[0][j - 1] + 1;
	    else minDist[0][j] = 1; 
	}
	for (int i = 0; i < n; i++) {
        if (a[i] == b[0]) minDist[i][0] = j;
        else if (i > 0) minDist[i][0] = minDist[i - 1][0] + 1;
        else minDist[i][0] = 1;
	}
	for (int i = 1; i < n; i++) {
	    for (int j = 1; j < m; j++) {
	        if (a[i] == b[j]) {
	            minDist[i][j] = Math.min(minDist[i - 1][j] + 1, minDist[i][j - 1] + 1, minDist[i - 1][j - 1]);
	        } else {
	            minDist[i][j] = Math.min(minDist[i - 1][j] + 1, minDist[i][j - 1] + 1, minDist[i - 1][j - 1] + 1);
	        }
	    }
	}
	return minDist[n - 1][m - 1];
}

如何编程计算最长公共子串长度？
public int lcs(char[] a, int n, char[] b, int m) {
	int[][] maxlcs = new int[n][m];
	for (int j = 0; j < m; j++) {
	    if (a[0] == b[j]) maxlcs[0][j] = 1;
	    else if (j > 0) maxlcs[0][j] = maxlcs[0][j - 1];
	    else maxlcs[0][j] = 0;
	}
	for (int i = 0; i < n; i++) {
	    if (b[0] == a[i]) maxlcs[i][0] = 1;
	    else if (i > 0) maxlcs[i][0] = maxlcs[i - 1][0];
	    else maxlcs[i][0] = 0;
	}
	for (int i = 1; i < n; i++) {
	    for (int j = 1; j < m; j++) {
	        if (a[i] == a[j]) {
	            maxlcs = Math.max(maxlcs[i - 1][j - 1] + 1, maxlcs[i - 1][j], maxlcs[i][j - 1]);
	        } else {
	            maxlcs = Math.max(maxlcs[i - 1][j - 1], maxlcs[i - 1][j], maxlcs[i][j - 1]);
	        }
	    }
	}
	return maxlcs[n - 1][m - 1];
}
