public int maxW = Integer.MIN_VALUE; //存储背包中物品总重量的最大值// cw表示当前已经装进去的物品的重量和；i表示考察到哪个物品了；// w背包重量；items表示每个物品的重量；n表示物品个数// 假设背包可承受重量100，物品个数10，物品重量存储在数组a中，那可以这样调用函数：// f(0, 0, a, 10, 100)

public void f(int i, int cw, int[] items, int w) {
    if (cw == w || i == n) {
        if (cw > maxW)
            maxW = cw;
        return;
    }
    f(i + 1, cw, items, w);
    if (cw + items[i] <= w) {
        f(i + 1, cw + items[i], items, w);
    }	
}



// 利用一个boolean的二位数组去重。
// f(a, b)  是一种状态，如果已经算过了，就不要再算一次了。

private int maxW = Integer.MIN_VALUE; // 结果放到maxW中
private int[] weight = {2，2，4，6，3};  // 物品重量
private int n = 5; // 物品个数
private int w = 9; // 背包承受的最大重量
private boolean[][] mem = new boolean[5][10]; // 备忘录，默认值false
public void f(int i, int cw) { // 调用f(0, 0)
  if (cw == w || i == n) { // cw==w表示装满了，i==n表示物品都考察完了
    if (cw > maxW) maxW = cw;
    return;
  }
  if (mem[i][cw]) return; // 重复状态
  mem[i][cw] = true; // 记录(i, cw)这个状态
  f(i+1, cw); // 选择不装第i个物品
  if (cw + weight[i] <= w) {
    f(i+1,cw + weight[i]); // 选择装第i个物品
  }
}

// 利用动态规划求解

public int knapsack(int[] weight, int n, int w) {
	boolean[][] states = new boolean[n][w + 1];
	states[0][0] = true;
	if (weight[0] <= w) {
	    states[0][weight[0]] = true;
	}
	for (int i = 1; i < n; i++) {
	    for (int j = 0; j <= w; j++) {
            if (states[i - 1][j] == true)
                states[i][j] = true;
	    }
	    for (int j = 0; j <= w - weight[i]; j++) {
            if (states[i][j] == true) {
                states[i][j + weight[i]] = true;
            }
	    }
	}
	for (int i = w; i >= 0; i--) {
        if (states[n][i] == true)
             return i;
	}
}

// 使用一个数组
public int knapspack(int[] items, int n, int w) {
	boolean[] states = new int[w + 1];
	states[0] = true;
	if (items[0] <= w) {
        states[items[0]] = true;
	}
	for (int i = 1; i < n; i++) {
        for (int j = w - items[i]; j >= 0; j--) {
            if (states[j] == true) {
                states[j + items[i]] = true;
            }
        }
	}
	for (int i = w; i >= 0; i--) {
	    if (states[i] == true)
	        return i;
	}
}
