// 对于一组不同重量、不同价值、不可分割的物品，我们选择将某些物品装入背包，在满足背包最大重量限制的前提下，背包中可装入物品的总价值最大是多少呢？


private int maxW = Integer.MIN_VALUE;
private int maxV = Integer.MIN_VALUE; // 结果放到maxV中
private int[] items = {2，2，4，6，3};  // 物品的重量
private int[] value = {3，4，8，9，6}; // 物品的价值
private int n = 5; // 物品个数
private int w = 9; // 背包承受的最大重量
private cw = 0;
private cv = 0;
public void f(int i, int cw, int cv) {
    if (w == cw || i == n) {
        if (cw > maxW) {
            maxW = cw;
        }
        if (cv > maxV) {
            maxV = cv;
        }
        return;
    }
    f(i + 1, cw, cv);
    if (items[i] + cw <= w) {
        f(i + 1, cw + items[i], cv + value[i]);
    }
}

// 使用动态规划解决
public static int knaspack3(int[] weight, int[] value, int n, int w) {
	int[][] states = new int[n][w + 1];
	for (int i = 0; i < n; i++) {
	    for (int j = 0; j <= w; j++) {
	        states[i][j] = -1;
	    }
	}
	states[0][0] = 0;
	if (weight[0] <= w) {
	    states[0][weight[0]] = value[0];
	}
    for (int i = 1; i < n; i++) {
        for (int j = 0; j <= w; j++) {
            if (states[i - 1][j] >= 0) {
                states[i][j] = states[i - 1][j];
            }
        }
        for (int j = 0; j <= w - weight[i]; j++) {
            if (states[i][j] >= 0) {
                int v = states[i - 1][j] + value[i];
                if (v > states[i][j + weight[i]]) {
                    states[i][j + weight[i]] = v;
                }
            }
        }
    }
    int max_value = 0;
    for (int j = 0; j <= w; j++) {
        if (states[n - 1][j] > max_value) max_value = states[n - 1][j];
    }
    return max_value;
}
