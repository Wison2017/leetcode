假设我们有一个 n 乘以 n 的矩阵 w[n][n]。矩阵存储的都是正整数。棋子起始位置在左上角，终止位置在右下角。我们将棋子从左上角移动到右下角。每次只能向右或者向下移动一位。从左上角到右下角，会有很多不同的路径可以走。我们把每条路径经过的数字加起来看作路径的长度。那从左上角移动到右下角的最短路径长度是多少呢？
回溯法:
private int minValue = Integer.MAX_VALUE;
public void minDistBT(int i, int j, int dist, int[][] w, int n) {
	if (i == n && j == n - 1) {
	    if (dist < minValue) {
	        minValue = dist;
	    }
	    return;
	}
	if (i == n - 1 && j == n) {
	    if (dist < minValue) {
	        minValue = dist;
	    }
	    return;
	}
    if (i < n) {
        minDistBT(i + 1, j, dist + w[i][j], n);
    }
    if (j < n) {
        minDistBT(j, j + 1, dist + w[i][j], n);
    }
}


动态规划1: 状态转移表法：
public int minDistDP(int[][] matrix, int n) {
	int[][] dist = new int[n][n];
	dist[0][0] = matrix[0];
	for (int i = 1; i < n; i++) {
	    dist[0][i] = dist[0][i - 1] + matrix[0][i];
	}
	for (int j = 1; j < n; j++) {
	    dist[j][0] = dist[j - 1][0] + matrix[j][0];
	}
    
    for (int i = 1; i < n; i++) {
        for (int j = 1; j < n; j++) {
            dist[i][j] = 
                    matrix[i][j] + Math.min(dist[i - 1][j], dist[i][j - 1]);
        }
    }
    return dist[n - 1][n - 1];
}

动态规划2: 状态转移方程：
public int minDistDP(int i, int j) {
	 if (i == 0 && j == 0) {
	     return matrix[0][0];
	 }
	 if (mem[i][j] > 0) {
	     return mem[i][j];
	 }
	 int left = Integer.MAX_VALUE;
	 if (j - 1 >= 0) {
	     left = minDistDP(i, j - 1);
	 }
	 int right = Integer.MAX_VALUE;
	 if (i - 1 >= 0) {
         right = minDistDP(i, j - 1);
	 }
	 int current_value = Math.min(left, right) + matrix[i][j];
	 mem[i][j] = current_value;
	 return current_value;
}
