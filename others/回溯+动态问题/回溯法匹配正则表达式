假设正则表达式中只包含“*”和“?”这两种通配符，并且对这两个通配符的语义稍微做些改变，其中，“*”匹配任意多个（大于等于 0 个）任意字符，“?”匹配零个或者一个任意字符。基于以上背景假设，我们看下，如何用回溯算法，判断一个给定的文本，能否跟给定的正则表达式匹配？

public class Pattern() {
	private boolean match = false;
	private char[] pattern;
	private int plen;

	public Pattern(char[] pattern, int plen) {
	    this.pattern = pattern;
	    this.plen = plen;
	}

	public boolean match(char[] text, int tlen) {
	    matched = false;
	    rmatch(0, 0, text, tlen);
	    return matched;
	}

	public void rmatch(int ti, int pj, char[] text, int tlen) {
	    if (matched == true)
	        return;
	    if (pj == plen) {
	        if (ti == tlen)
	            matched = true;
	            return;
	    }
	    if (pattern[pj] == '*') {
	        for (int k = 0; k <= tlen - ti; k++) {
	            rmatch(ti + k, pj + 1, text, tlen);
	        }
	    } else if (pattern[pj] == '+') {
	        rmatch(ti, pj + 1, text, tlen);
	        rmatch(ti + 1, pj + 1, text, tlen);
	    } else if (ti < tlen && pattern[pj] == text[ti]) {
	        rmatch(ti + 1, pj + 1, text, tlen);
	    }
	}
}

