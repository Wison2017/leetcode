public class AcNode {
	public char data;
	public AcNode[] children = new AcNode[26];
	public int length = -1;
	public boolean isEndingCode = false;
	public AcNode fail;
	public AcNode (char data) {
	    this.data = data;
	}
}

public void buildFailurePointer () {
	Queue<AcNode> queue = new LinkedList<>();
	root.fail = null;
	queue.add(root);
	while (!queue.isEmpty()) {
	    AcNode p = queue.remove();
	    for (int i = 0; i < 26; i++) {
	        AcNode pc = p.children[i];
	        if (p == root) {
	            pc.fail = root;
	        } else {
	            AcNode q = p.fail;
	            while (q != null) {
	                int index = p.children[i] - 'a';
	                AcNode qc = q.children[index];
	                if (qc != null) {
	                    pc.fail = qc;
	                    break;
	                }
	                q = q.fail;
	            }
	            if (q == null) {
	                pc.fail = root;
	            }
	        }
	    }
	    queue.add(qc);
	}
}

public void match(char[] text) {
	int n = text.length;
	TrieNode p = root;
	for (int i = 0; i < n; i++) {
	    int index = text[i] - 'a';
	    while (p.children[index] == null && p != root) {
	        p = p.fail;
	    }
        p = p.children[index];
        if (p == null) {
            p = root;
        }
        AcNode tmp = p;
        while (tmp != root) {
            if (tmp.isEndingCode == true) {
                int pos = i - tmp.length + 1;
                System.out.println("匹配起始下标:" + pos + "; 长度:" + tmp.length);
            }
            tmp = tmp.fail;
        }
	}
}
