通过归并排序计算逆序度：

private int num = 0;

public int count(int[] a, int n) {
	if (n <= 1) return 0;
	num = 0;
	mergeSortCounting(a, 0, n - 1);
	return num;
}

public void mergeSortCounting(int[] a, int p, int r) {
	if (p >= r) return;
	int mid = (p + r) / 2;
	mergeSortCounting(a, p, mid);
    mergeSortCounting(a, mid + 1, r);
    merge(a, p, mid, r);
}

public void merge(int[] a, int p, int mid, int r) {
	int i = p; int j = mid + 1; int k = 0;
	int[] temp = new int[r - p + 1];
	while (i <= mid && j <= r) {
        if (a[i] <= a[j]) {
            temp[k++] = a[i++];  
        } else {
            num += mid - i + 1;
            temp[k++] = a[j++];
        }
	}
	while (i <= mid) {
	    temp[k++] = a[i++];
	}
	while (j <= r) {
	    temp[k++] = a[j++]; 
	}
	for (int i = 0; i < k; i++) {
	    a[p+i] = temp[i];
	}
}
